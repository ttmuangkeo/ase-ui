I"Û(function() {
  var Helpers;

  Helpers = (function() {
    Helpers.prototype.simulateOptions = {
      pointerX: 0,
      pointerY: 0,
      button: 0,
      ctrlKey: false,
      altKey: false,
      shiftKey: false,
      metaKey: false,
      bubbles: true,
      cancelable: true,
      randomCount: 0
    };

    Helpers.prototype.eventMatchers = {
      HTMLEvents: /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
      MouseEvents: /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
    };

    function Helpers(name) {
      this.name = name;
    }

    Helpers.prototype.simulate = function(element, eventName) {
      var eventType, evt, name, oEvent, options;
      options = this.extendSimulate(this.simulateOptions, arguments[2] || {});
      oEvent = void 0;
      eventType = null;
      for (name in this.eventMatchers) {
        if (this.eventMatchers[name].test(eventName)) {
          eventType = name;
          break;
        }
      }
      if (!eventType) {
        throw new SyntaxError("Only HTMLEvents and MouseEvents interfaces are supported");
      }
      if (document.createEvent != null) {
        oEvent = document.createEvent(eventType);
        if (eventType === "HTMLEvents") {
          oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        } else {
          oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView, options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
      } else {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        evt = document.createEventObject();
        oEvent = this.extendSimulate(evt, options);
        element.fireEvent("on" + eventName, oEvent);
      }
      return element;
    };

    Helpers.prototype.extendSimulate = function(destination, source) {
      var property;
      for (property in source) {
        destination[property] = source[property];
      }
      return destination;
    };

    return Helpers;

  })();

  window.Helpers = new Helpers();

}).call(this);
:ET