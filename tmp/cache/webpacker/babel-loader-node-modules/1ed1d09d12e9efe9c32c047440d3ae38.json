{"ast":null,"code":"module.exports = {\n  polygon: {\n    custom: true,\n    layertype: '',\n    name: '',\n    geojson: {\n      type: \"MultiPolygon\",\n      coordinates: []\n    },\n    geolayerid: -1,\n    templateids: []\n  },\n  createMultiPolygon: function createMultiPolygon(currentLayer, drawnObject) {\n    var _this = this;\n\n    var thsArray, thsArrayTwo;\n    drawnObject.forEach(function (o, i) {\n      thsArray = [];\n      thsArrayTwo = [];\n      o.getPath().getArray().forEach(function (o, i) {\n        var lat = parseFloat(o.lat().toString());\n        var lng = parseFloat(o.lng().toString());\n        thsArrayTwo.push([lng, lat]);\n      }); // Close the polygon and round out the array.\n\n      thsArrayTwo.push(thsArrayTwo[0]);\n      thsArray.push(thsArrayTwo);\n\n      _this.polygon.geojson.coordinates.push(thsArray);\n    });\n\n    if (!this.validateAndNamePolygon()) {\n      this.createLayer();\n    }\n  },\n  validateAndNamePolygon: function validateAndNamePolygon() {\n    var err = false;\n    var $layerType2 = $(\"#layerType2\");\n    var $name = $(\"input[name=customName]\");\n    this.polygon.layertype = $layerType2.val();\n    this.polygon.name = $name.val();\n\n    if ($.trim(this.polygon.layertype) === '') {\n      err = true;\n      $layerType2.off('change').on('change', function () {\n        $(this).closest('.form-group').removeClass('errored');\n      }).closest('.form-group').addClass('errored');\n    }\n\n    if ($.trim(this.polygon.name) === '') {\n      err = true;\n      $name.off('keyup').on('keyup', function () {\n        $(this).closest('.form-group').removeClass('errored');\n      }).closest('.form-group').addClass('errored');\n    }\n\n    return err;\n  },\n  recreateMultiPolygon: function recreateMultiPolygon(currentLayer) {\n    var _this2 = this;\n\n    if (!this.validateAndNamePolygon()) {\n      currentLayer.forEach(function (coord) {\n        _this2.polygon.geojson.coordinates.push(coord);\n      });\n      this.createLayer();\n    }\n  },\n  createLayer: function createLayer(geoJSON) {\n    $.ajax({\n      url: '/api/new_layer',\n      method: 'post',\n      data: {\n        geolayer: JSON.stringify(this.polygon)\n      },\n      success: function success(res) {\n        PubSub.publish('NEW_LAYER_COMPLETE');\n        console.log(res);\n      }\n    });\n  },\n  deleteLayer: function deleteLayer(layerid) {\n    $.ajax({\n      url: \"/api/delete_layer/\".concat(layerid),\n      success: function success() {\n        PubSub.publish('LAYER_DELETED');\n      }\n    });\n  },\n  resetPolygonInstance: function resetPolygonInstance() {\n    this.polygon = {\n      custom: true,\n      layertype: '',\n      name: '',\n      geojson: {\n        type: \"MultiPolygon\",\n        coordinates: []\n      },\n      geolayerid: -1,\n      templateids: []\n    };\n  }\n};","map":{"version":3,"sources":["/Users/timmuangkeo/Desktop/fork/LayerDraw/app/javascript/contrib/Services.js"],"names":["module","exports","polygon","custom","layertype","name","geojson","type","coordinates","geolayerid","templateids","createMultiPolygon","currentLayer","drawnObject","thsArray","thsArrayTwo","forEach","o","i","getPath","getArray","lat","parseFloat","toString","lng","push","validateAndNamePolygon","createLayer","err","$layerType2","$","$name","val","trim","off","on","closest","removeClass","addClass","recreateMultiPolygon","coord","geoJSON","ajax","url","method","data","geolayer","JSON","stringify","success","res","PubSub","publish","console","log","deleteLayer","layerid","resetPolygonInstance"],"mappings":"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","sourcesContent":["module.exports = {\n  polygon: {\n    custom: true,\n    layertype: '',\n    name: '',\n    geojson: {\n      type: \"MultiPolygon\",\n      coordinates: [],\n    },\n    geolayerid: -1,\n    templateids: []\n  },\n  createMultiPolygon(currentLayer, drawnObject) {\n\n    let thsArray, thsArrayTwo;\n    \n    drawnObject.forEach((o, i) => {\n      thsArray = [];\n      thsArrayTwo = [];\n      \n      o.getPath().getArray().forEach((o, i) => {\n        \n        const lat = parseFloat(o.lat().toString());\n        \n        const lng = parseFloat(o.lng().toString())\n        \n        thsArrayTwo.push([lng, lat]);\n\n      });\n\n      // Close the polygon and round out the array.\n      thsArrayTwo.push(thsArrayTwo[0]);\n      thsArray.push(thsArrayTwo);\n      this.polygon.geojson.coordinates.push(thsArray);\n    });\n\n    if (!this.validateAndNamePolygon()) {\n      this.createLayer();\n    }\n\n  },\n  validateAndNamePolygon() {\n    let err = false;\n    let $layerType2 = $(\"#layerType2\");\n    let $name = $(\"input[name=customName]\");\n    this.polygon.layertype = $layerType2.val();\n    this.polygon.name = $name.val();\n    \n    if ($.trim(this.polygon.layertype) === '') {\n      err = true;\n      $layerType2.off('change').on('change', function() {\n        $(this).closest('.form-group').removeClass('errored');\n      }).closest('.form-group').addClass('errored')\n    }\n    if ($.trim(this.polygon.name) === '') {\n      err = true;\n      $name.off('keyup').on('keyup', function() {\n        $(this).closest('.form-group').removeClass('errored');\n      }).closest('.form-group').addClass('errored');\n    }\n    \n    return err;\n    \n  },\n  recreateMultiPolygon(currentLayer) {\n    if(!this.validateAndNamePolygon()) {\n      currentLayer.forEach((coord) => {\n        this.polygon.geojson.coordinates.push(coord);\n      })\n      this.createLayer();\n    }\n  },\n  createLayer(geoJSON) {\n    $.ajax({\n      url: '/api/new_layer',\n      method: 'post',\n      data: { geolayer : JSON.stringify(this.polygon) },\n      success: function(res) {\n        PubSub.publish('NEW_LAYER_COMPLETE');\n        console.log(res)\n      }\n    })\n  },\n  deleteLayer(layerid) {\n    $.ajax({\n      url: `/api/delete_layer/${layerid}`,\n      success: function() {\n        PubSub.publish('LAYER_DELETED');\n      }\n    });\n  },\n  resetPolygonInstance() {\n    this.polygon = {\n      custom: true,\n      layertype: '',\n      name: '',\n      geojson: {\n        type: \"MultiPolygon\",\n        coordinates: [],\n      },\n      geolayerid: -1,\n      templateids: []\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}