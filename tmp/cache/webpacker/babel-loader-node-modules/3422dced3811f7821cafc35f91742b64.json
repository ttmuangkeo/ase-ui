{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Store from '../data/Store';\nimport Atlas from '../contrib/Atlas';\nimport Polygon from '../contrib/Polygon';\nimport Service from '../contrib/Services';\nimport LayerForm from '../components/LayerForm';\nimport { createNamespacedHelpers } from 'vuex';\nexport default {\n  components: {\n    LayerForm: LayerForm\n  },\n  data: function data() {\n    return {\n      search: '',\n      selected: null,\n      formHidden: true\n    };\n  },\n  mounted: function mounted() {\n    // Poll for when atlas node is available\n    var interval = setInterval(function () {\n      if (document.querySelector('#atlas-map') !== null) {\n        clearInterval(interval);\n        Atlas.initMap();\n      }\n    });\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.$store.commit('updateAllBoundaries', {});\n    next();\n  },\n  methods: {\n    initMap: function initMap() {\n      var map = window.atlasInstance;\n      var geocoder = new google.maps.Geocoder();\n      this.findLocation(geocoder, map);\n    },\n    // geocode location and push result's lat/lng to get all layers\n    findLocation: function findLocation(geocoder, map) {\n      var _this = this;\n\n      geocoder.geocode({\n        'address': this.search\n      }, function (res, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          var marker = new google.maps.Marker({\n            position: res[0].geometry.location,\n            animation: google.maps.Animation.DROP\n          });\n          map.setCenter(res[0].geometry.location);\n          marker.setMap(map);\n\n          _this.updateViewPort(res[0]);\n\n          _this.getAllLayerPoint(res[0]);\n        }\n      });\n    },\n    updateViewPort: function updateViewPort(res) {\n      window.atlasInstance.fitBounds(res.geometry.viewport);\n    },\n    // gett all the layers\n    getAllLayerPoint: function getAllLayerPoint(res) {\n      var self = this;\n      var lat = res.geometry.location.lat();\n      var lng = res.geometry.location.lng();\n      $.ajax({\n        url: window.base_service + \"/listing/geo/layer/search?center_lat=\".concat(lat, \"&center_lon=\").concat(lng, \"&geotype=all&buffer_miles=0\"),\n        success: function success(val) {\n          self.$store.commit('updateAllBoundaries', val.data.result_list);\n        }\n      });\n    },\n    // update store with current custom layer's geojson\n    getLayer: function getLayer(result) {\n      this.$store.commit('updateCurrentCustomLayer', result);\n      Polygon.draw(result.geojson, true);\n    },\n    // copy the current layer's geojson coordinates\n    duplicateLayer: function duplicateLayer(rec) {\n      var _this2 = this;\n\n      Service.resetPolygonInstance();\n      Service.recreateMultiPolygon(this.$store.getters.currentCustomLayer.geojson.coordinates);\n      PubSub.subscribe('NEW_LAYER_COMPLETE', function () {\n        _this2.$router.push({\n          name: 'all-layers'\n        })[\"catch\"]('err');\n      });\n    }\n  }\n};","map":{"version":3,"sources":["GeoInspect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n      <div class=\"main-container\">\n        <div id=\"container-geocode\">\n          <h3>Search for Boundaries</h3>\n          <p>Click to view the layer. </p>\n            <input class=\"form-control\" id='input-geocode' v-model=\"search\" type=\"text\" placeholder=\"Enter location\" @keyup.enter=\"initMap()\">\n        </div>\n        <div id=\"listing\" v-if=\"$store.getters.allBoundaries.length\">\n          <div id=\"resultsTable\">\n            <ul>\n              <li v-for=\"(rec, index) in $store.getters.allBoundaries\" :class=\"{active:index == selected}\" v-bind:key=\"`rec-${index}`\" @click=\"getLayer(rec); selected = index\">\n                <strong>GeoLayer ID:</strong> {{rec.geolayerid}}\n                <br/> \n                <strong>Name:</strong> {{rec.name | normalizeBadEncoding}}\n                <br/> \n                <strong>layertype:</strong> {{rec.layertype}}\n                <br/> \n                <strong>custom: {{rec.custom}}</strong> \n                <br/> \n                <button class=\"form-control\" id=\"input-geocode\" @click=\"formHidden = !formHidden\">Duplicate</button>\n                <hr>\n              </li>\n            </ul>\n          </div>\n        </div>\n          <div class=\"main-container\" id=\"layer-form\" v-if=\"!formHidden\">\n            <h4>Enter a Name and Type.</h4>\n            <p>Then click <strong>Duplicate</strong> once more</p>\n            <strong>Note:</strong>\n            <p>Remember to include prefix and suffix if the address contains them (Pl, Dr, County...)</p>\n            <LayerForm/>\n            <button class=\"form-control\" @click=\"duplicateLayer(rec)\">Submit</button>\n          </div>\n      </div>\n      <div id=\"atlas-map\"></div>    \n    </section>\n</template>\n\n<script>\nimport Store from '../data/Store';\nimport Atlas from '../contrib/Atlas';\nimport Polygon from '../contrib/Polygon';\nimport Service from '../contrib/Services';\nimport LayerForm from '../components/LayerForm';\nimport { createNamespacedHelpers } from 'vuex';\n\n\nexport default {\n  components: {\n    LayerForm\n  },\n  data() {\n    return {\n      search: '',\n      selected: null,\n      formHidden: true\n    }\n  },\n  mounted() {\n    // Poll for when atlas node is available\n    const interval = setInterval(() => {\n      if (document.querySelector('#atlas-map') !== null) {\n        clearInterval(interval);\n        Atlas.initMap();\n      }\n    });\n  },\n  beforeRouteLeave (to, from, next) {\n    this.$store.commit('updateAllBoundaries', {})\n    next()\n  },\n  methods: {\n    initMap() {\n      const map = window.atlasInstance;\n      const geocoder = new google.maps.Geocoder()\n      this.findLocation(geocoder, map)\n    },\n    // geocode location and push result's lat/lng to get all layers\n    findLocation(geocoder, map) {\n      geocoder.geocode({\n        'address': this.search\n      }, (res, status) => {\n        if(status == google.maps.GeocoderStatus.OK) {\n          const marker = new google.maps.Marker({\n            position: res[0].geometry.location,\n            animation: google.maps.Animation.DROP\n          })\n          map.setCenter(res[0].geometry.location)\n          marker.setMap(map);\n          this.updateViewPort(res[0]);\n          this.getAllLayerPoint(res[0]);\n        }\n      })\n    },\n    updateViewPort(res) {\n      window.atlasInstance.fitBounds(res.geometry.viewport);\n    },\n    // gett all the layers\n    getAllLayerPoint(res) {\n      const self = this;\n      let lat = res.geometry.location.lat();\n      let lng = res.geometry.location.lng();\n      $.ajax({\n        url: window.base_service + `/listing/geo/layer/search?center_lat=${lat}&center_lon=${lng}&geotype=all&buffer_miles=0`,\n        success: function(val) {\n          self.$store.commit('updateAllBoundaries', val.data.result_list);\n        }\n      })\n    },\n    // update store with current custom layer's geojson\n    getLayer(result) {\n      this.$store.commit('updateCurrentCustomLayer', result)\n      Polygon.draw(result.geojson, true);\n    },\n    // copy the current layer's geojson coordinates\n    duplicateLayer(rec) {\n      Service.resetPolygonInstance();\n      Service.recreateMultiPolygon(this.$store.getters.currentCustomLayer.geojson.coordinates);\n      PubSub.subscribe('NEW_LAYER_COMPLETE', () => {\n        this.$router.push({ name: 'all-layers' }).catch('err');\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n#atlas-map {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n}\nli.active {\n  background-color:rgba(221, 220, 220, 0.699);\n  padding: 0px 10px;\n}\n.main-container {\n    z-index: 100;\n    position: relative;\n    width: 20%;\n    margin: 10px;\n    padding: 10px;\n    background-color:rgba(255,255,255,0.75);\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n#input-geocode {\n    background-color: #fff;\n    font-size: 15px;\n    font-weight: 300;\n    margin: 12px 0;\n    padding: 0 11px 0 13px;\n    text-overflow: ellipsis;\n    width: 100%;\n}\n.form-control {\n    background-color: #fff;\n    padding: 5px;\n    border: 1px solid #999;\n    line-height: 30px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n#resultsTable {\n  width: 100%;\n  height: 700px;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n#layer-form {\n  width: 100%;\n  position: absolute;\n  left: 100%;\n  z-index: 100;\n  top: 0%;\n}\n</style> "],"sourceRoot":"app/javascript/views"},"metadata":{},"sourceType":"module"}