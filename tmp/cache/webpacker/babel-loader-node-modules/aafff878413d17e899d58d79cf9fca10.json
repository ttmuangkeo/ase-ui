{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Atlas from '../contrib/Atlas';\nimport Polygon from '../contrib/Polygon';\nexport default {\n  mounted: function mounted() {\n    var _this = this;\n\n    // Poll for when atlas node is available\n    var interval = setInterval(function () {\n      if (document.querySelector('#atlas-map') !== null) {\n        clearInterval(interval);\n        Atlas.initMap();\n\n        _this.getAllCustomLayers();\n      }\n    });\n  },\n  methods: {\n    initDrawTool: function initDrawTool() {\n      this.drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: ['polygon', 'rectangle']\n        }\n      });\n      this.drawingManager.setMap(this.atlasInstance);\n    },\n    getAllCustomLayers: function getAllCustomLayers() {\n      var self = this;\n      $.ajax({\n        url: '/api/get_layers_to_manage',\n        method: 'POST',\n        success: function success(res) {\n          console.log(res);\n          self.$store.commit('updateCustomLayerResponse', res.data.result_list);\n        }\n      });\n    },\n    getLayer: function getLayer(layerid) {\n      this.$router.push({\n        name: 'get-layer',\n        params: {\n          layerid: layerid\n        }\n      });\n    },\n    drawPolygon: function drawPolygon() {\n      var self = this;\n      this.clearPolygon();\n      google.maps.event.addListenerOnce(this.atlasInstance, 'idle', function () {\n        setTimeout(function () {\n          Polygon.dynamicallyDrawLayer(this.$store.getters.currentCustomLayer, window.atlasInstance);\n        }, 250);\n      });\n      google.maps.event.addListenerOnce(this.drawingManager, \"overlaycomplete\", function (e) {\n        var newShape = {};\n        newShape = e.overlay;\n        newShape.type = e.type;\n        self.drawnEntities.push(newShape);\n      });\n    },\n    clearPolygon: function clearPolygon() {\n      if (this.drawnEntities.length > 0) {\n        this.drawnEntities.forEach(function (o, i) {\n          o.setMap(null);\n        });\n        this.$store.commit('updateDrawnEntities', []);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["AllLayers.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,OAAA,KAAA,MAAA,kBAAA;AACA,OAAA,OAAA,MAAA,oBAAA;AAEA,eAAA;AACA,EAAA,OADA,qBACA;AAAA;;AACA;AACA,QAAA,QAAA,GAAA,WAAA,CAAA,YAAA;AACA,UAAA,QAAA,CAAA,aAAA,CAAA,YAAA,MAAA,IAAA,EAAA;AACA,QAAA,aAAA,CAAA,QAAA,CAAA;AACA,QAAA,KAAA,CAAA,OAAA;;AACA,QAAA,KAAA,CAAA,kBAAA;AACA;AACA,KANA,CAAA;AAOA,GAVA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AACA,WAAA,cAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,cAAA,CAAA;AACA,QAAA,WAAA,EAAA,MAAA,CAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,OADA;AAEA,QAAA,cAAA,EAAA,IAFA;AAGA,QAAA,qBAAA,EAAA;AACA,UAAA,QAAA,EAAA,MAAA,CAAA,IAAA,CAAA,eAAA,CAAA,UADA;AAEA,UAAA,YAAA,EAAA,CAAA,SAAA,EAAA,WAAA;AAFA;AAHA,OAAA,CAAA;AAQA,WAAA,cAAA,CAAA,MAAA,CAAA,KAAA,aAAA;AACA,KAXA;AAYA,IAAA,kBAZA,gCAYA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,MAAA,CAAA,CAAA,IAAA,CAAA;AACA,QAAA,GAAA,EAAA,2BADA;AAEA,QAAA,MAAA,EAAA,MAFA;AAGA,QAAA,OAAA,EAAA,iBAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,UAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA,2BAAA,EAAA,GAAA,CAAA,IAAA,CAAA,WAAA;AACA;AANA,OAAA;AAQA,KAtBA;AAuBA,IAAA,QAvBA,oBAuBA,OAvBA,EAuBA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,IAAA,EAAA,WAAA;AAAA,QAAA,MAAA,EAAA;AAAA,UAAA,OAAA,EAAA;AAAA;AAAA,OAAA;AACA,KAzBA;AA0BA,IAAA,WA1BA,yBA0BA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,WAAA,YAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,KAAA,aAAA,EAAA,MAAA,EAAA,YAAA;AACA,QAAA,UAAA,CAAA,YAAA;AACA,UAAA,OAAA,CAAA,oBAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,kBAAA,EAAA,MAAA,CAAA,aAAA;AACA,SAFA,EAEA,GAFA,CAAA;AAGA,OAJA;AAKA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA,KAAA,cAAA,EAAA,iBAAA,EAAA,UAAA,CAAA,EAAA;AACA,YAAA,QAAA,GAAA,EAAA;AACA,QAAA,QAAA,GAAA,CAAA,CAAA,OAAA;AACA,QAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,QAAA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA;AACA,OALA;AAMA,KAxCA;AAyCA,IAAA,YAzCA,0BAyCA;AACA,UAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,aAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AACA,UAAA,CAAA,CAAA,MAAA,CAAA,IAAA;AACA,SAFA;AAGA,aAAA,MAAA,CAAA,MAAA,CAAA,qBAAA,EAAA,EAAA;AACA;AACA;AAhDA;AAXA,CAAA","sourcesContent":["<template>\n  <section>\n    <div id=\"layer-options\">\n      <ul>\n        <li v-for=\"(rec, index) in $store.getters.customLayerResponse\" v-bind:key=\"`rec-${index}`\" v-on:click=\"getLayer(rec.geolayerid)\">\n          Name: {{ rec.name | normalizeBadEncoding }}<br />\n          ID: {{ rec.geolayerid }} <br />\n          Type: {{ rec.layertype }}\n        </li>\n      </ul>\n    </div>\n    <div id=\"atlas-map\"></div>\n  </section>\n</template>\n\n<script>\n  import Atlas from '../contrib/Atlas';\n  import Polygon from '../contrib/Polygon';\n\n  export default {\n    mounted() {\n      // Poll for when atlas node is available\n      const interval = setInterval(() => {\n        if (document.querySelector('#atlas-map') !== null) {\n          clearInterval(interval);\n          Atlas.initMap();\n          this.getAllCustomLayers();\n        }\n      });\n    },\n    methods: {\n      initDrawTool() {\n        this.drawingManager = new google.maps.drawing.DrawingManager({\n          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n          drawingControl: true,\n          drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: ['polygon', 'rectangle']\n          }\n        });\n        this.drawingManager.setMap(this.atlasInstance);\n      },\n      getAllCustomLayers() {\n        const self = this;\n        $.ajax({\n          url: '/api/get_layers_to_manage',\n          method: 'POST',\n          success: function(res) {\n            console.log(res)\n            self.$store.commit('updateCustomLayerResponse', res.data.result_list);\n          }\n        });\n      },\n      getLayer(layerid) {\n        this.$router.push({ name: 'get-layer', params: { layerid: layerid } })\n      },\n      drawPolygon() {\n        const self = this;\n        this.clearPolygon();\n        google.maps.event.addListenerOnce(this.atlasInstance, 'idle', () => {\n          setTimeout(function() {\n            Polygon.dynamicallyDrawLayer(this.$store.getters.currentCustomLayer, window.atlasInstance);\n          }, 250)\n        });\n        google.maps.event.addListenerOnce(this.drawingManager, \"overlaycomplete\", function(e) {\n          let newShape = {}\n          newShape = e.overlay\n          newShape.type = e.type\n          self.drawnEntities.push(newShape)\n        });\n      },\n      clearPolygon() {\n        if (this.drawnEntities.length > 0) {\n          this.drawnEntities.forEach(function(o, i) {\n            o.setMap(null);\n          });\n          this.$store.commit('updateDrawnEntities', []);\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  #layer-options {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 65%;\n    bottom: 0;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n  #atlas-map {\n    position: absolute;\n    top: 0;\n    left: 25%;\n    right: 0;\n    bottom: 0;\n  }\n\n  li {\n    padding: 24px;\n    cursor: pointer;\n    border-bottom: 1px solid #dcdcdc;\n  }\n\n  li:first-child {\n    margin-top: 0;\n  }\n</style>\n"],"sourceRoot":"app/javascript/views"},"metadata":{},"sourceType":"module"}