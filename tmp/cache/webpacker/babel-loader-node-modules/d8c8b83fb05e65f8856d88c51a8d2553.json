{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Store from '../data/Store';\nimport Atlas from '../contrib/Atlas';\nimport Polygon from '../contrib/Polygon';\nimport Service from '../contrib/Services';\nimport LayerForm from '../components/LayerForm';\nexport default {\n  components: {\n    LayerForm: LayerForm\n  },\n  data: function data() {\n    return {\n      formHidden: true\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // Poll for when atlas node is available\n    var interval = setInterval(function () {\n      if (document.querySelector('#atlas-map') !== null) {\n        clearInterval(interval);\n        Atlas.initMap();\n\n        _this.getLayerAndPersist();\n      }\n    });\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.$store.commit('updateDrawingManager', null);\n    this.$store.commit('resetNewlyDrawnObject');\n    Service.resetPolygonInstance();\n    next();\n  },\n  methods: {\n    getLayerAndPersist: function getLayerAndPersist() {\n      var self = this;\n      $.ajax({\n        url: \"/api/get_layer/\".concat(this.$route.params.layerid),\n        method: 'POST',\n        success: function success(res) {\n          self.$store.commit('updateCurrentCustomLayer', res.data.result_list[0]);\n          var entities = Polygon.draw(self.$store.getters.currentCustomLayer.geojson, true);\n          self.$store.commit('updateDrawnEntities', [entities]);\n        }\n      });\n    },\n    initDrawTool: function initDrawTool() {\n      if (this.$store.getters.drawingManager !== null) return false;\n      this.clearPolygonEntities();\n      var drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        polygonOptions: {\n          editable: true,\n          clickable: true\n        },\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: ['polygon']\n        }\n      });\n      this.$store.commit('updateDrawingManager', drawingManager);\n      this.$store.getters.drawingManager.setMap(window.atlasInstance);\n      this.setPolygonListener();\n    },\n    clearPolygonEntities: function clearPolygonEntities() {\n      this.$store.getters.drawnEntities.forEach(function (o, i) {\n        o.setMap(null);\n      });\n    },\n    setPolygonListener: function setPolygonListener() {\n      var _this2 = this;\n\n      google.maps.event.addListener(this.$store.getters.drawingManager, \"polygoncomplete\", function (polygon) {\n        _this2.$store.commit('updateLayerDrawn', true);\n\n        _this2.$store.commit('updateNewlyDrawnObject', polygon);\n      });\n    },\n    returnLayerTitle: function returnLayerTitle() {\n      if (!this.$store.getters.currentCustomLayer.name) return false;\n      return this.$options.filters.normalizeBadEncoding(this.$store.getters.currentCustomLayer.name);\n    },\n    replaceLayer: function replaceLayer() {\n      var _this3 = this;\n\n      var getters = this.$store.getters;\n      Service.createMultiPolygon(getters.currentCustomLayer, getters.getNewlyDrawnObject);\n      PubSub.subscribe('NEW_LAYER_COMPLETE', function () {\n        _this3.deleteLayer(_this3.$store.getters.currentCustomLayer.geolayerid);\n      });\n    },\n    deleteLayerPreFlight: function deleteLayerPreFlight() {\n      if (confirm('Are you absolutely sure? This is a big deal.')) {\n        this.deleteLayer(this.$store.getters.currentCustomLayer.geolayerid);\n      }\n    },\n    deleteLayer: function deleteLayer(layerid) {\n      var self = this;\n      Service.deleteLayer(layerid);\n      PubSub.subscribe('LAYER_DELETED', function () {\n        self.$router.push({\n          name: 'all-layers'\n        });\n      });\n    }\n  }\n};","map":{"version":3,"sources":["Layer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section>\n    <div id=\"layer-options\">\n      <div class=\"v-container\">\n        <h3 v-html=\"returnLayerTitle()\"></h3>\n        <div v-if=\"$store.getters.drawingManager === null\">\n          <strong>Geolayer ID: </strong> {{$store.getters.currentCustomLayer.geolayerid}}\n          <br />\n          <strong>Layer Type: </strong> {{$store.getters.currentCustomLayer.layertype}}\n          <hr />\n          <p>What would you like to do?</p>\n          <button class=\"btn btn-primary \" type=\"button\" v-on:click=\"initDrawTool()\">Replace Layer</button>\n          <button class=\"btn btn-danger\" type=\"button\" v-on:click=\"deleteLayerPreFlight()\">Delete Layer</button>\n        </div>\n        <div v-else-if=\"$store.getters.drawingManager !== null && !$store.getters.layerDrawn\">\n          <p>The drawing tool has been activated. Please draw your new layer on the map. Once you've closed your polygon, you'll recieve more options.</p>\n        </div>\n        <div v-else>\n          <br />\n          <LayerForm />\n          <dl class=\"form-group\">\n            <dd>\n              <button class=\"btn\" type=\"button\" v-on:click=\"replaceLayer()\">Replace Layer</button>\n            </dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n    <div id=\"atlas-map\"></div>\n  </section>\n</template>\n\n<script>\n  import Store from '../data/Store';\n  import Atlas from '../contrib/Atlas';\n  import Polygon from '../contrib/Polygon';\n  import Service from '../contrib/Services';\n  import LayerForm from '../components/LayerForm';\n\n  export default {\n    components: {\n      LayerForm\n    },\n    data() {\n      return {\n        formHidden: true\n      }\n    },\n    mounted() {\n      // Poll for when atlas node is available\n      const interval = setInterval(() => {\n        if (document.querySelector('#atlas-map') !== null) {\n          clearInterval(interval);\n          Atlas.initMap();\n          this.getLayerAndPersist();\n        }\n      });\n    },\n    beforeRouteLeave (to, from, next) {\n      this.$store.commit('updateDrawingManager', null);\n      this.$store.commit('resetNewlyDrawnObject');\n      Service.resetPolygonInstance();\n      next();\n    },\n    methods: {\n      getLayerAndPersist() {\n        const self = this;\n        $.ajax({\n          url: `/api/get_layer/${this.$route.params.layerid}`,\n          method: 'POST',\n          success: function(res) {\n            self.$store.commit('updateCurrentCustomLayer', res.data.result_list[0]);\n            const entities = Polygon.draw(self.$store.getters.currentCustomLayer.geojson, true);\n            self.$store.commit('updateDrawnEntities', [entities]);\n          }\n        });\n      },\n      initDrawTool() {\n        if (this.$store.getters.drawingManager !== null) return false;\n        this.clearPolygonEntities();\n        const drawingManager = new google.maps.drawing.DrawingManager({\n          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n          drawingControl: true,\n          polygonOptions: {\n            editable: true,\n            clickable: true\n          },\n          drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: ['polygon']\n          }\n        });\n        this.$store.commit('updateDrawingManager', drawingManager);\n        this.$store.getters.drawingManager.setMap(window.atlasInstance);\n        this.setPolygonListener();\n      },\n      clearPolygonEntities() {\n        this.$store.getters.drawnEntities.forEach((o, i) => {\n          o.setMap(null);\n        });\n      },\n      setPolygonListener() {\n        google.maps.event.addListener(this.$store.getters.drawingManager, \"polygoncomplete\", (polygon) => {\n          this.$store.commit('updateLayerDrawn', true);\n          this.$store.commit('updateNewlyDrawnObject', polygon);\n        });\n      },\n      returnLayerTitle() {\n        if (!this.$store.getters.currentCustomLayer.name) return false;\n        return this.$options.filters.normalizeBadEncoding(this.$store.getters.currentCustomLayer.name);\n      },\n      replaceLayer() {\n        const getters = this.$store.getters;\n        Service.createMultiPolygon(getters.currentCustomLayer, getters.getNewlyDrawnObject);\n        PubSub.subscribe('NEW_LAYER_COMPLETE', () => {\n          this.deleteLayer(this.$store.getters.currentCustomLayer.geolayerid);\n        });\n      },\n      deleteLayerPreFlight() {\n        if (confirm('Are you absolutely sure? This is a big deal.')) {\n          this.deleteLayer(this.$store.getters.currentCustomLayer.geolayerid)\n        }\n      },\n      deleteLayer(layerid) {\n        const self = this;\n        Service.deleteLayer(layerid);\n        PubSub.subscribe('LAYER_DELETED', () => {\n          self.$router.push({ name: 'all-layers' });\n        });\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .v-container {\n    padding: 24px;\n  }\n  #layer-options {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 75%;\n    bottom: 0;\n    overflow-y: auto;\n    overflow-x: hidden;\n  } \n  #atlas-map {\n    position: absolute;\n    top: 0;\n    left: 25%;\n    right: 0;\n    bottom: 0;\n  }\n</style>\n"],"sourceRoot":"app/javascript/views"},"metadata":{},"sourceType":"module"}