{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Store from '../data/Store';\nimport Atlas from '../contrib/Atlas';\nimport Polygon from '../contrib/Polygon';\nimport Service from '../contrib/Services';\nimport LayerForm from '../components/LayerForm';\nexport default {\n  components: {\n    LayerForm: LayerForm\n  },\n  data: function data() {\n    return {\n      address: ''\n    };\n  },\n  mounted: function mounted() {\n    // Poll for when atlas node is available\n    var interval = setInterval(function () {\n      if (document.querySelector('#atlas-map') !== null) {\n        clearInterval(interval);\n        Atlas.initMap();\n      }\n    });\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.$store.commit('updateDrawingManager', null);\n    this.$store.commit('resetNewlyDrawnObject');\n    Service.resetPolygonInstance();\n    next();\n  },\n  methods: {\n    initMap: function initMap() {\n      var map = window.atlasInstance;\n      var geocoder = new google.maps.Geocoder();\n      this.findLocation(geocoder, map);\n    },\n    findLocation: function findLocation(geocoder, map) {\n      var _this = this;\n\n      geocoder.geocode({\n        'address': this.address\n      }, function (res, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          var marker = new google.maps.Marker({\n            position: res[0].geometry.location,\n            animation: google.maps.Animation.DROP\n          });\n          map.setCenter(res[0].geometry.location);\n          marker.setMap(map);\n\n          _this.updateViewPort(res[0]);\n        }\n\n        ;\n      });\n    },\n    updateViewPort: function updateViewPort(location) {\n      window.atlasInstance.fitBounds(location.geometry.viewport);\n    },\n    initDrawTool: function initDrawTool() {\n      if (this.$store.getters.drawingManager !== null) return false;\n      this.clearPolygonEntities();\n      var drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n        drawingControl: true,\n        polygonOptions: {\n          editable: true,\n          draggable: true\n        },\n        drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: ['polygon']\n        }\n      });\n      this.$store.commit('updateDrawingManager', drawingManager);\n      this.$store.getters.drawingManager.setMap(window.atlasInstance);\n      this.setPolygonListener();\n    },\n    clearPolygonEntities: function clearPolygonEntities() {\n      this.$store.getters.drawnEntities.forEach(function (o, i) {\n        o.setMap(null);\n      });\n    },\n    setPolygonListener: function setPolygonListener() {\n      var _this2 = this;\n\n      google.maps.event.addListener(this.$store.getters.drawingManager, 'polygoncomplete', function (polygon) {\n        _this2.$store.commit('updateLayerDrawn', true);\n\n        _this2.$store.commit('updateNewlyDrawnObject', polygon);\n      });\n    },\n    createNewLayer: function createNewLayer() {\n      var getters = this.$store.getters;\n      var self = this;\n      Service.createMultiPolygon(null, getters.getNewlyDrawnObject);\n      PubSub.subscribe('NEW_LAYER_COMPLETE', function () {\n        self.$router.push({\n          name: 'all-layers'\n        });\n      });\n    }\n  }\n};","map":{"version":3,"sources":["NewLayer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <section>\n        <div class=\"container\" v-if=\"$store.getters.drawingManager === null\">\n            <input class=\"form-control\" id='input-geocode' v-model=\"address\" type=\"text\" placeholder=\"Enter Location\" @keyup.enter=\"initMap()\">\n            <button class=\"form-control\" id=\"init-draw\" @click=\"initDrawTool()\">Enable Draw Tool </button>\n        </div>\n        <div class=\"container\" v-else-if=\"$store.getters.drawingManager !== null && !$store.getters.layerDrawn\">\n            \n        </div>\n        <div class=\"wrapper\" v-else>\n            <LayerForm />\n            <dl class=\"form-group\">\n                <dd>\n                    <button class=\"form-control\" type=\"button\" @click=\"createNewLayer()\">create</button>\n                </dd>\n            </dl>\n        </div>\n        <div id=\"atlas-map\"></div>\n    </section>\n</template>\n\n<script>\n  import Store from '../data/Store';\n  import Atlas from '../contrib/Atlas';\n  import Polygon from '../contrib/Polygon';\n  import Service from '../contrib/Services';\n  import LayerForm from '../components/LayerForm';\nexport default {\n    components: {\n        LayerForm\n    },\n    data() {\n        return {\n            address: '',\n        }\n    },\n    mounted() {\n      // Poll for when atlas node is available\n      const interval = setInterval(() => {\n        if (document.querySelector('#atlas-map') !== null) {\n          clearInterval(interval);\n          Atlas.initMap();\n        }\n      });\n    },\n    beforeRouteLeave (to, from, next) {\n      this.$store.commit('updateDrawingManager', null);\n      this.$store.commit('resetNewlyDrawnObject');\n      Service.resetPolygonInstance();\n      next();\n    },    \n    methods: {\n        initMap() {\n            const map = window.atlasInstance;\n            const geocoder = new google.maps.Geocoder();\n            this.findLocation(geocoder, map);\n        },\n        findLocation(geocoder, map) {\n            geocoder.geocode({\n                'address': this.address\n            }, (res, status) => {\n                if(status == google.maps.GeocoderStatus.OK) {\n                    const marker = new google.maps.Marker({\n                        position: res[0].geometry.location,\n                        animation: google.maps.Animation.DROP\n                    });\n                    map.setCenter(res[0].geometry.location);\n                    marker.setMap(map);\n                    this.updateViewPort(res[0]);\n                };\n            });\n        },\n        updateViewPort(location) {\n            window.atlasInstance.fitBounds(location.geometry.viewport);\n        },\n        initDrawTool() {\n            if (this.$store.getters.drawingManager !== null) return false;\n            this.clearPolygonEntities();\n            const drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: google.maps.drawing.OverlayType.POLYGON,\n                drawingControl: true,\n                polygonOptions: {\n                    editable: true,\n                    draggable: true\n                },\n                drawingControlOptions: {\n                    position: google.maps.ControlPosition.TOP_CENTER,\n                    drawingModes: ['polygon']\n                }\n            });\n            this.$store.commit('updateDrawingManager', drawingManager);\n            this.$store.getters.drawingManager.setMap(window.atlasInstance);\n            this.setPolygonListener();\n        },\n        clearPolygonEntities() {\n            this.$store.getters.drawnEntities.forEach((o, i) => {\n                o.setMap(null);\n            });\n        },\n        setPolygonListener() {\n            google.maps.event.addListener(this.$store.getters.drawingManager, 'polygoncomplete', (polygon) => {\n                this.$store.commit('updateLayerDrawn', true);\n                this.$store.commit('updateNewlyDrawnObject', polygon);\n            });\n        },\n        createNewLayer() {\n            const getters = this.$store.getters;\n            const self = this;\n            Service.createMultiPolygon(null, getters.getNewlyDrawnObject);\n            PubSub.subscribe('NEW_LAYER_COMPLETE', () => {\n                self.$router.push({ name: 'all-layers' });\n            });\n        }\n    }\n}\n</script>\n\n<style scoped>\n.container {\n    width: 100%;\n    z-index: 100;\n    position: relative;\n}\n.wrapper {\n    z-index: 100;\n    position: relative;\n    width: 20%;\n    margin: 10px;\n    padding: 10px;\n    background-color:rgba(255,255,255,0.7);\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n#atlas-map {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n#input-geocode {\n    background-color: #fff;\n    font-size: 15px;\n    font-weight: 300;\n    margin: 12px;\n    padding: 0 11px 0 13px;\n    text-overflow: ellipsis;\n    width: 350px;\n}\n.form-control {\n    background-color: #fff;\n    border: 1px solid #999;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n</style>"],"sourceRoot":"app/javascript/views"},"metadata":{},"sourceType":"module"}